{"version":3,"sources":["utils/apiHitHelpers.js","store/user/userAction.js","components/Signup/Signup.js"],"names":["baseURL","process","BASE_URL","getaxiosInstance","axios","create","MakeRequest","url","data","successAction","failureAction","post","then","succResp","catch","err","clearProps","dispatch","type","CLEARING_PROPS","payload","toggleSignupDrawer","open","TOGGLE_SIGNUP_DRAWER","toggleContactUsDrawer","TOGGLE_CONTACT_US_DRAWER","toggleLoginDrawer","TOGGLE_LOGIN_DRAWER","registerInquiry","REQUEST","res","REGISTER_INQUIRY","user","FAILED_INQUIRY_REQUEST","response","connect","state","openSignupDrawer","props","processing_reg","title","width","onClose","visible","bodyStyle","paddingBottom","name","labelCol","span","wrapperCol","initialValues","remember","onFinish","values","onFinishFailed","errorInfo","message","error","Item","label","rules","required","placeholder","Password","offset","htmlType","loading"],"mappings":"wUAEaA,EAAUC,mIAAYC,SAEnC,SAASC,IAKP,OAJsBC,IAAMC,OAAO,CAEjCL,WAGJ,CAEO,IAAMM,EAgBP,SAACC,EAAKC,EAAMC,EAAeC,GAC7BP,IACGQ,KAAKJ,EAAKC,GACVI,MAAK,SAACC,GACDJ,GACFA,EAAcI,EAElB,IACCC,OAAM,SAACC,GACFL,GACFA,EAAcK,EAElB,GACJ,ECtBWC,EAAa,WAAH,OAAS,SAACC,GAC7BA,EAAS,CACLC,KAAKC,IACLC,SAAQ,GAEhB,CAAC,EAEYC,EAAqB,SAACC,GAAI,OAAK,SAACL,GACzCA,EAAS,CACLC,KAAKK,IACLH,QAAQE,GAEhB,CAAC,EAEYE,EAAwB,SAACF,GAAI,OAAK,SAACL,GAC5CA,EAAS,CACLC,KAAKO,IACLL,QAAQE,GAEhB,CAAC,EAEYI,EAAoB,SAACJ,GAAI,OAAK,SAACL,GACxCA,EAAS,CACLC,KAAKS,IACLP,QAAQE,GAEhB,CAAC,EAEYM,EAAkB,SAACpB,GAAI,OAAK,SAACS,GACtCA,EAAS,CACLC,KAAMW,IACNT,SAAS,IAcbd,EAAiB,2BAA2BE,GAZ7B,SAACsB,GACZb,EAAS,CACLC,KAAMa,IACNX,QAAS,CAACY,KAAMF,EAAItB,KAAKA,OAEjC,IACkB,SAACO,GACfE,EAAS,CACLC,KAAMe,IACNb,QAASL,EAAImB,SAAS1B,MAE9B,GAEJ,CAAC,C,kCCjED,qFA4Ie2B,uBANS,SAACC,GACrB,MAAO,CACHC,iBAAkBD,EAAMJ,KAAKK,iBAErC,GAEwC,CACpChB,wBADWc,EA/HA,SAACG,GAEZ,IACIjB,EAGAiB,EAHAjB,mBACAgB,EAEAC,EAFAD,iBACAE,EACAD,EADAC,eAuCJ,OACI,mCACI,cAAC,IAAM,CACHC,MAAM,SACNC,MAAO,IACPC,QAjBI,WACZrB,GAAmB,EACvB,EAgBYsB,QAASN,EACTO,UAAW,CAAEC,cAAe,IAAK,SAEjC,eAAC,IAAI,CACDC,KAAK,aACLC,SAAU,CACNC,KAAM,GAEVC,WAAY,CACRD,KAAM,IAEVE,cAAe,CACXC,UAAU,GAEdC,SA5BC,SAACC,GACdhC,GAAmB,EACvB,EA2BgBiC,eAzBO,SAACC,GACpBC,IAAQC,MAAM,4CAA4C,EAC9D,EAuB+C,UAE/B,cAAC,IAAKC,KAAI,CACNZ,KAAK,YACLa,MAAM,aACNC,MAAO,CAAC,CAAEC,UAAU,EAAML,QAAS,iCAAkC,SAErE,cAAC,IAAK,CAACM,YAAY,mCAEvB,cAAC,IAAKJ,KAAI,CACNZ,KAAK,WACLa,MAAM,YACNC,MAAO,CAAC,CAAEC,UAAU,EAAML,QAAS,gCAAiC,SAEpE,cAAC,IAAK,CAACM,YAAY,kCAEvB,cAAC,IAAKJ,KAAI,CACNC,MAAM,WACNb,KAAK,WACLc,MAAO,CACH,CACIC,UAAU,EACVL,QAAS,+BAEf,SAEF,cAAC,IAAK,CAACM,YAAY,iCAEvB,cAAC,IAAKJ,KAAI,CACNC,MAAM,WACNb,KAAK,WACLc,MAAO,CACH,CACIC,UAAU,EACVL,QAAS,+BAEf,SAEF,cAAC,IAAMO,SAAQ,MAEnB,cAAC,IAAKL,KAAI,CACNT,WAAY,CACRe,OAAQ,GACRhB,KAAM,IACR,SAEF,cAAC,IAAM,CAAC9B,KAAK,UAAU+C,SAAS,SAASC,QAAS3B,EAAe,SAAC,mBAQ1F,G","file":"static/js/7.09645288.chunk.js","sourcesContent":["import axios from \"axios\";\n\nexport const baseURL = process.env.BASE_URL\n\nfunction getaxiosInstance() {\n  const axiosInstance = axios.create({\n    // baseURL:\"http://localhost:7000\",\n    baseURL\n  });\n  return axiosInstance;\n}\n\nexport const MakeRequest = {\n  get(url, successAction, failureAction) {\n    getaxiosInstance()\n      .get(url)\n      .then((succResp) => {\n        if (successAction) {\n          successAction(succResp);\n        }\n      })\n      .catch((err) => {\n        if (failureAction) {\n          failureAction(err);\n        }\n      });\n  },\n\n  post(url, data, successAction, failureAction) {\n    getaxiosInstance()\n      .post(url, data)\n      .then((succResp) => {\n        if (successAction) {\n          successAction(succResp);\n        } \n      })\n      .catch((err) => {\n        if (failureAction) {\n          failureAction(err);\n        }\n      });\n  },\n};\n","import {\n    TOGGLE_SIGNUP_DRAWER,\n    TOGGLE_LOGIN_DRAWER,\n    REGISTER_INQUIRY,\n    FAILED_INQUIRY_REQUEST,\n    REQUEST,\n    CLEARING_PROPS,\n    TOGGLE_MODAL,\n    TOGGLE_CONTACT_US_DRAWER\n} from './userType'\nimport { MakeRequest } from '../../utils/apiHitHelpers';\n\nexport const toggleModal = (value) => (dispatch) => {\n    dispatch({\n        type:TOGGLE_MODAL,\n        payload:value\n    })\n}\n\nexport const clearProps = () => (dispatch) => {\n    dispatch({\n        type:CLEARING_PROPS,\n        payload:true\n    })\n}\n\nexport const toggleSignupDrawer = (open) => (dispatch) => {\n    dispatch({\n        type:TOGGLE_SIGNUP_DRAWER,\n        payload:open\n    })\n}\n\nexport const toggleContactUsDrawer = (open) => (dispatch) => {\n    dispatch({\n        type:TOGGLE_CONTACT_US_DRAWER,\n        payload:open\n    })\n}\n\nexport const toggleLoginDrawer = (open) => (dispatch) => {\n    dispatch({\n        type:TOGGLE_LOGIN_DRAWER,\n        payload:open\n    })\n}\n\nexport const registerInquiry = (data) => (dispatch) => {\n    dispatch({\n        type: REQUEST,\n        payload: true\n    });\n    let succFunc = (res) => {\n        dispatch({\n            type: REGISTER_INQUIRY,\n            payload: {user: res.data.data} \n        });\n    };\n    let failureFunc = (err) => {\n        dispatch({\n            type: FAILED_INQUIRY_REQUEST,\n            payload: err.response.data\n        });\n    };\n    MakeRequest.post(\"/public/register-inquiry\",data, succFunc, failureFunc);\n}\n","import React, {useEffect} from 'react'\nimport { connect } from 'react-redux'\nimport { \n    Drawer, \n    Form, \n    Button, \n    Input,\n    message\n} from 'antd';\nimport { \n    toggleSignupDrawer, \n } from '../../store/user/userAction';\n\nconst Signup = (props) => {\n\n    const {\n        toggleSignupDrawer,\n        openSignupDrawer,\n        processing_reg,\n    } = props;\n\n    // useEffect(() => {\n    //     if(req_success){\n    //         message.success('User successfully registered!',0.8)\n    //         .then(()=> {\n    //             toggleSignupDrawer(false)\n    //             history.push('/dashboard')\n    //         })\n    //     }\n    //     return () => {\n    //         clearProps()\n    //     }\n    // },[req_success]);\n\n    // useEffect(() => {\n    //     if(failed_req && openSignupDrawer){\n    //         if (failed_req.msg === \"User Already Registered\"){\n    //             message.error('The username is already taken. Please try another username',3);\n    //         }\n    //         else{\n    //             message.error('Something went wrong. Please check the form again and submit', 3);\n    //         }\n    //     }\n    // },[failed_req]);\n\n    const onClose = () => {\n        toggleSignupDrawer(false)\n    };\n\n    const onFinish = (values) => {\n        toggleSignupDrawer(false)\n    };\n\n    const onFinishFailed = (errorInfo) => {\n        message.error('Please fill in all the fields of the form',3);\n    };\n\n    return (\n        <>\n            <Drawer\n                title=\"Signup\"\n                width={720}\n                onClose={onClose}\n                visible={openSignupDrawer}\n                bodyStyle={{ paddingBottom: 80 }}\n            >\n                <Form\n                    name=\"signupForm\"\n                    labelCol={{\n                        span: 6,\n                    }}\n                    wrapperCol={{\n                        span: 13,\n                    }}\n                    initialValues={{\n                        remember: true,\n                    }}\n                    onFinish={onFinish}\n                    onFinishFailed={onFinishFailed}\n                >\n                    <Form.Item\n                        name=\"firstName\"\n                        label=\"First Name\"\n                        rules={[{ required: true, message: 'Please enter your First Name' }]}\n                    >\n                        <Input placeholder=\"Please enter your First Name\" />\n                    </Form.Item>\n                    <Form.Item\n                        name=\"lastName\"\n                        label=\"Last Name\"\n                        rules={[{ required: true, message: 'Please enter your Last Name' }]}\n                    >\n                        <Input placeholder=\"Please enter your Last Name\" />\n                    </Form.Item>\n                    <Form.Item\n                        label=\"Username\"\n                        name=\"username\"\n                        rules={[\n                            {\n                                required: true,\n                                message: 'Please input your Username',\n                            },\n                        ]}\n                    >\n                        <Input placeholder=\"Please enter your Username\" />\n                    </Form.Item>\n                    <Form.Item\n                        label=\"Password\"\n                        name=\"password\"\n                        rules={[\n                            {\n                                required: true,\n                                message: 'Please input your Password',\n                            },\n                        ]}\n                    >\n                        <Input.Password />\n                    </Form.Item>\n                    <Form.Item\n                        wrapperCol={{\n                            offset: 10,\n                            span: 16,\n                        }}\n                    >\n                        <Button type=\"primary\" htmlType=\"submit\" loading={processing_reg}>\n                            Submit\n                        </Button>\n                    </Form.Item>\n                </Form>\n            </Drawer>\n        </>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        openSignupDrawer: state.user.openSignupDrawer\n    }\n};\n\nexport default connect(mapStateToProps, { \n    toggleSignupDrawer, \n})(Signup)\n"],"sourceRoot":""}