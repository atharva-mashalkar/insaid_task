{"version":3,"sources":["components/ContactUs/ContactUs.js"],"names":["connect","state","openContactUsDrawer","user","failed_req","processing_reg","req_success","toggleContactUsDrawer","clearProps","registerInquiry","props","history","useHistory","TextArea","Input","useEffect","message","success","then","push","error","title","width","onClose","visible","bodyStyle","paddingBottom","name","labelCol","span","wrapperCol","initialValues","remember","onFinish","values","phoneNumber","toString","length","emailId","includes","onFinishFailed","errorInfo","Item","label","rules","required","placeholder","style","rows","offset","type","htmlType","loading"],"mappings":"iIAAA,uGAuLeA,uBATS,SAACC,GACrB,MAAO,CACHC,oBAAqBD,EAAME,KAAKD,oBAChCE,WAAYH,EAAME,KAAKC,WACvBC,eAAgBJ,EAAME,KAAKE,eAC3BC,YAAaL,EAAME,KAAKG,YAEhC,GAEwC,CACpCC,0BACAC,eACAC,qBAHWT,EArKA,SAACU,GAEZ,IAAIC,EAAUC,cAENC,EAAaC,IAAbD,SAGJN,EAEAG,EAFAH,sBACAL,EACAQ,EADAR,oBAIAO,EAKAC,EALAD,gBACAD,EAIAE,EAJAF,WACAH,EAGAK,EAHAL,eACAC,EAEAI,EAFAJ,YACAF,EACAM,EADAN,WAGJW,qBAAU,WAQN,OAPGT,GACCU,IAAQC,QAAQ,mCAAmC,IAClDC,MAAK,WACFX,GAAsB,GACtBI,EAAQQ,KAAK,IACjB,IAEG,WACHX,GACJ,CACJ,GAAE,CAACF,IAEHS,qBAAU,WACHX,GAAcF,GACbc,IAAQI,MAAM,mDAAmD,EAEzE,GAAE,CAAChB,IA6BH,OACI,mCACI,cAAC,IAAM,CACHiB,MAAM,aACNC,MAAO,IACPC,QAhCI,WACZhB,GAAsB,EAC1B,EA+BYiB,QAAStB,EACTuB,UAAW,CAAEC,cAAe,IAAK,SAEjC,eAAC,IAAI,CACDC,KAAK,YACLC,SAAU,CACNC,KAAM,GAEVC,WAAY,CACRD,KAAM,IAEVE,cAAe,CACXC,UAAU,GAEdC,SA3CC,SAACC,GACXA,EAAOC,YAAYC,WAAWC,OAAS,GACtCrB,IAAQI,MAAM,oCAAoC,GAE7Cc,EAAOI,QAAQC,SAAS,KAI7B9B,EAAgByB,GAHhBlB,IAAQI,MAAM,gCAAgC,EAKtD,EAkCgBoB,eAhCO,SAACC,GACpBzB,IAAQI,MAAM,4CAA4C,EAC9D,EA8B+C,UAE/B,cAAC,IAAKsB,KAAI,CACNf,KAAK,YACLgB,MAAM,aACNC,MAAO,CAAC,CAAEC,UAAU,EAAM7B,QAAS,iCAAkC,SAErE,cAAC,IAAK,CAAC8B,YAAY,mCAEvB,cAAC,IAAKJ,KAAI,CACNf,KAAK,WACLgB,MAAM,YACNC,MAAO,CAAC,CAAEC,UAAU,EAAM7B,QAAS,gCAAiC,SAEpE,cAAC,IAAK,CAAC8B,YAAY,kCAEvB,cAAC,IAAKJ,KAAI,CACNC,MAAM,WACNhB,KAAK,UACLiB,MAAO,CACH,CACIC,UAAU,EACV7B,QAAS,+BAEf,SAEF,cAAC,IAAK,CAAC8B,YAAY,iCAEvB,cAAC,IAAKJ,KAAI,CACNC,MAAM,eACNhB,KAAK,cACLiB,MAAO,CACH,CACIC,UAAU,EACV7B,QAAS,mCAEf,SAEF,cAAC,IAAW,CAAC+B,MAAO,CACJzB,MAAO,YAG3B,cAAC,IAAKoB,KAAI,CACNC,MAAM,UACNhB,KAAK,UACLiB,MAAO,CACH,CACIC,UAAS,EACT7B,QAAS,4CAGf,SACF,cAACH,EAAQ,CAACmC,KAAM,EAAGF,YAAY,4CAEnC,cAAC,IAAKJ,KAAI,CACNZ,WAAY,CACRmB,OAAQ,GACRpB,KAAM,IACR,SAEF,cAAC,IAAM,CAACqB,KAAK,UAAUC,SAAS,SAASC,QAAS/C,EAAe,SAAE,mBAQ3F,G","file":"static/js/10.8800581f.chunk.js","sourcesContent":["import React, {useEffect} from 'react'\nimport { connect } from 'react-redux'\nimport { \n    Drawer, \n    Form, \n    Button, \n    Input,\n    InputNumber,\n    message,\n} from 'antd';\nimport { \n    toggleContactUsDrawer, \n    clearProps,\n    registerInquiry\n } from '../../store/user/userAction';\n\n import { useHistory } from \"react-router-dom\";\n\nconst Signup = (props) => {\n\n    let history = useHistory();\n\n    const { TextArea } = Input;\n\n    const {\n        toggleContactUsDrawer,\n        openContactUsDrawer\n    } = props;\n\n    const {\n        registerInquiry,\n        clearProps,\n        processing_reg,\n        req_success,\n        failed_req\n    } = props;\n\n    useEffect(() => {\n        if(req_success){\n            message.success('Request successfully registered!',0.8)\n            .then(()=> {\n                toggleContactUsDrawer(false)\n                history.push('/')\n            })\n        }\n        return () => {\n            clearProps()\n        }\n    },[req_success]);\n\n    useEffect(() => {\n        if(failed_req && openContactUsDrawer){\n            message.error('The form is incorrectly filled. Plese try again.',3);\n        }\n    },[failed_req]);\n\n    const onClose = () => {\n        toggleContactUsDrawer(false)\n    };\n\n    const onFinish = (values) => {\n        if(values.phoneNumber.toString().length > 10){\n            message.error('Please input correct Phone Number',3);\n        }\n        else if(!values.emailId.includes(\"@\")){\n            message.error('Please input correct Email Id',3);\n        }\n        else{\n            registerInquiry(values);\n        }\n    };\n\n    const onFinishFailed = (errorInfo) => {\n        message.error('Please fill in all the fields of the form',3);\n    };\n\n    const onChange = (value) => {\n        console.log('changed', value);\n        if (value.length() > 10){\n            message.error('Please!',0.8)\n        }\n    };\n\n    return (\n        <>\n            <Drawer\n                title=\"Contact Us\"\n                width={720}\n                onClose={onClose}\n                visible={openContactUsDrawer}\n                bodyStyle={{ paddingBottom: 80 }}\n            >\n                <Form\n                    name=\"contactUs\"\n                    labelCol={{\n                        span: 6,\n                    }}\n                    wrapperCol={{\n                        span: 13,\n                    }}\n                    initialValues={{\n                        remember: true,\n                    }}\n                    onFinish={onFinish}\n                    onFinishFailed={onFinishFailed}\n                >\n                    <Form.Item\n                        name=\"firstName\"\n                        label=\"First Name\"\n                        rules={[{ required: true, message: 'Please enter your First Name' }]}\n                    >\n                        <Input placeholder=\"Please enter your First Name\" />\n                    </Form.Item>\n                    <Form.Item\n                        name=\"lastName\"\n                        label=\"Last Name\"\n                        rules={[{ required: true, message: 'Please enter your Last Name' }]}\n                    >\n                        <Input placeholder=\"Please enter your Last Name\" />\n                    </Form.Item>\n                    <Form.Item\n                        label=\"Email ID\"\n                        name=\"emailId\"\n                        rules={[\n                            {\n                                required: true,\n                                message: 'Please input your Email Id',\n                            },\n                        ]}\n                    >\n                        <Input placeholder=\"Please enter your Email Id\" />\n                    </Form.Item>\n                    <Form.Item\n                        label=\"Phone Number\"\n                        name=\"phoneNumber\"\n                        rules={[\n                            {\n                                required: true,\n                                message: 'Please input your Phone Number',\n                            },\n                        ]}\n                    >\n                        <InputNumber style={{\n                                        width: '100%',\n                                    }}/>\n                    </Form.Item>\n                    <Form.Item\n                        label=\"Inquiry\"\n                        name=\"inquiry\"\n                        rules={[\n                            {\n                                required:true,\n                                message: 'Please mention your request in the form'\n\n                            }\n                        ]}>\n                        <TextArea rows={4} placeholder=\"Please mention your request over here\"/>\n                    </Form.Item>\n                    <Form.Item\n                        wrapperCol={{\n                            offset: 10,\n                            span: 16,\n                        }}\n                    >\n                        <Button type=\"primary\" htmlType=\"submit\" loading={processing_reg} >\n                            Submit\n                        </Button>\n                    </Form.Item>\n                </Form>\n            </Drawer>\n        </>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        openContactUsDrawer: state.user.openContactUsDrawer,\n        failed_req: state.user.failed_req,\n        processing_reg: state.user.processing_reg,\n        req_success: state.user.req_success\n    }\n};\n\nexport default connect(mapStateToProps, { \n    toggleContactUsDrawer, \n    clearProps,\n    registerInquiry\n})(Signup)\n"],"sourceRoot":""}